<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter>
  <title>Binary&#160;Data&#160;Resources</title>

  <section>
    <title>Overview</title>
    <para>The XCEDE <emphasis>Binary Data Resource</emphasis> component is used to provide a generic interface to a binary data stream stored in one or more external files.  Any of the binary data resource types described in this chapter can be used anywhere an <literal>abstract_resource_t</literal> is called for (with the appropriate <literal>xsi:type</literal> attribute); in the current XCEDE schema, these locations are the top-level <literal>&lt;resource&gt;</literal> element and the <literal>&lt;dataResource&gt;</literal> child element of <literal>&lt;acquisition&gt;</literal>.</para>
    <para>XCEDE provides multiple layers of derived types to store more specialized information about the binary data.  The base type and each of the derived types are described in turn.</para>

    <formalpara>
      <title><literal>abstract_resource_t</literal></title>
      
      <para>The abstract base type <literal>abstract_resource_t</literal> provides a few elements and attributes that are especially important for binary data resources.  In particular, the <literal>&lt;uri&gt;</literal> element and its <literal>offset</literal> and <literal>size</literal> attributes point to a <quote>chunk</quote> of data stored in an external file.  A series of <literal>&lt;uri&gt;</literal> elements define a stream of data that may be described in greater detail by the data types described below.</para>
    </formalpara>

    <formalpara>
      <title><literal>binaryDataResource_t</literal></title>
      
      <para>This type derives from <literal>abstract_resource_t</literal> and allows an application to interpret the data stream as a sequence of data items with a given data type (<literal>&lt;elementType&gt;</literal>) and byte order (<literal>&lt;byteOrder&gt;</literal>).</para>
    </formalpara>

    <formalpara>
      <title><literal>dimensionedBinaryDataResource_t</literal></title>
      
      <para>The data stream, until now, could only be interpreted as a one-dimensional sequence.  This type provides <literal>&lt;dimension&gt;</literal> elements that allow the data stream to be interpreted as a multi-dimensional array of data items.  Each dimension has a <literal>&lt;size&gt;</literal> and a <literal>&lt;label&gt;</literal>, as well as the ability to discard subsets of the data in the data stream (using the <literal>outputSelect</literal> attribute).</para>
    </formalpara>

    <formalpara>
      <title><literal>mappedBinaryDataResource_t</literal></title>
      
      <para>This type places the multi-dimensional array of data items represented by <literal>dimensionedBinaryDataResource_t</literal> into an arbitrary coordinate system.</para>
    </formalpara>
  </section>

  <section>
    <title>Examples</title>

    <para>Several examples of binary data are presented here, each showing the use of one of the different binary data types described in this chapter.</para>

    <section>
      <title>Basic data stream</title>
      
      <para>The basic binary data resource type describes a sequence of data items.  For example, consider a data file (<literal>random_data_file.bin</literal>) containing 2048 random 32-bit floating point numbers, stored in little-endian (least-significant-byte first) order.  The <literal>&lt;dataResource&gt;</literal> describing this data is shown in <xref linkend='binary_data_resource.simple_example'/>.</para>

      <figure id="binary_data_resource.simple_example">
        <title>Simple <literal>binaryDataResource_t</literal> example</title>
        <programlisting><![CDATA[<dataResource xsi:type="binaryDataResource_t">
  <uri offset="0" size="8192">random_data_file.bin</uri>
  <elementType>float32</elementType>
  <byteOrder>lsbfirst</byteOrder>
</dataResource>]]></programlisting>
      </figure>

      <para>Note the <literal>xsi:type</literal> specifying that this <literal>&lt;dataResource&gt;</literal> element is of type <literal>binaryDataResource_t</literal>.  (The <literal>xsi:</literal> prefix should have already been declared previously in the XML file using something similar to <literal>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</literal>)</para>

      <para>The <literal>&lt;elementType&gt;</literal> element is restricted to one of several pre-defined strings (see the schema for details).  The <literal>&lt;byteOrder&gt;</literal> element must be <literal>lsbfirst</literal> for little-endian data or <literal>msbfirst</literal> for big-endian data.</para>

      <para>If the <literal>&lt;compression&gt;</literal> element is specified, it specifies that the file(s) pointed to by the <literal>&lt;uri&gt;</literal> elements are compressed.  The content of the element should specify which type of compression (the only compression method specifically recognized by this specification is <literal>gzip</literal>).  The <literal>size</literal> and <literal>offset</literal> attributes in the <literal>&lt;uri&gt;</literal> element always refer to the <emphasis>uncompressed</emphasis> data.  An example of this is shown in <xref linkend='binary_data_resource.gzip_example'/>.</para>

      <figure id="binary_data_resource.gzip_example">
        <title><literal>binaryDataResource_t</literal> with compression</title>
        <programlisting><![CDATA[<dataResource xsi:type="binaryDataResource_t">
  <uri offset="0" size="8192">random_data_file.bin.gz</uri>
  <elementType>float32</elementType>
  <byteOrder>lsbfirst</byteOrder>
  <compression>gzip</compression>
</dataResource>]]></programlisting>
      </figure>

      <para>As a special case, if the application does not find the file pointed to by a URI, and the <literal>&lt;compression&gt;</literal> element is <emphasis>not</emphasis> present, it may search for the same file with an appended <literal>.gz</literal> suffix, and if it exists, treat it as implicitly gzip-compressed data.  <xref linkend='binary_data_resource.implicit_gzip_example'/> shows how the same data in <xref linkend='binary_data_resource.gzip_example'/> could be expressed using this alternative method.  Pointing to the uncompressed version of the file (even when only the compressed version exists) allows the user to decompress or compress the data file at will, without affecting the ability of the application to read the data using the same <literal>binaryDataResource_t</literal>.  Note that the <literal>&lt;uri&gt;</literal> and <literal>&lt;compression&gt;</literal> elements must be internally consistent.  It would be an error to reference the uncompressed file <literal>random_data_file.bin</literal> and yet say that it was compressed using <literal>&lt;compression&gt;gzip&lt;/compression&gt;</literal>.  Likewise, explicit references to the compressed file (especially files that do not have the <literal>.gz</literal> suffix) must specify the compression method explicitly using the <literal>compression</literal> element.</para>

      <figure id="binary_data_resource.implicit_gzip_example">
        <title><literal>binaryDataResource_t</literal> with implicit compression</title>
        <programlisting><![CDATA[<dataResource xsi:type="binaryDataResource_t">
  <uri offset="0" size="8192">random_data_file.bin</uri>
  <elementType>float32</elementType>
  <byteOrder>lsbfirst</byteOrder>
</dataResource>]]></programlisting>
      </figure>

    </section>

    <section>
      <title>Dimensioned data</title>
      
      <para>Consider a camera that acquires an image using a 256x256 matrix of big-endian 32-bit signed integer voxels.  This data has two spatial dimensions, which, by convention, we label <inlineequation>x</inlineequation>, and <inlineequation>y</inlineequation> (and <inlineequation>z</inlineequation> if a third spatial dimension is needed, and <inlineequation>t</inlineequation> if there is a time dimension).  <xref linkend='binary_data_resource.dimension_example'/> shows how this data might be represented.</para>

      <figure id="binary_data_resource.dimension_example">
        <title><literal>dimensionedBinaryDataResource_t</literal> example</title>
        <programlisting><![CDATA[<dataResource xsi:type="dimensionedBinaryDataResource_t">
  <uri offset="0" size="262144">rawdata.img</uri>
  <elementType>int32</elementType>
  <byteOrder>msbfirst</byteOrder>
  <dimension label="x">
    <size>256</size>
  </dimension>
  <dimension label="y">
    <size>256</size>
  </dimension>
</dataResource>]]></programlisting>
      </figure>

      <para>Dimensions are ordered from fastest-moving to slowest-moving.  So in the above example, the <inlineequation>x</inlineequation> dimension index changes on each consecutive data item, but the <inlineequation>y</inlineequation> dimension changes every 256 elements.</para>

    </section>

    <section>
      <title>Mapped data</title>
      
      <para>A <quote>mapped</quote> binary data resource is a (perhaps multidimensional) array of values, the matrix indices of which can be converted into a location in a given coordinate system.  The location of the bounding box of the data in this space is given by specifying a location (in target-space coordinates) for the the first data item, and two things for each dimension: a unit-length direction vector (in the target-space coordinate system) and the spacing between successive data items in that dimension.  The transformation matrix for a three-dimensional coordinate system has the form shown in <xref linkend="binary_data_resource.matrix"/>.  This transformation matrix converts from matrix indices <literal>(x,y,z)</literal> to a coordinate location <literal>(a,b,c)</literal>.  <xref linkend="binary_data_resource.map_example"/> shows how the components of a transformation of MR image data into scanner RAS (Right/Anterior/Superior) coordinates are represented in a <literal>mappedBinaryDataResource_t</literal>.  The unit vectors for each dimension are <inlineequation>(X<subscript>A</subscript> X<subscript>B</subscript> X<subscript>C</subscript>) = (1 0 0)</inlineequation>, <inlineequation>(Y<subscript>A</subscript> Y<subscript>B</subscript> Y<subscript>C</subscript>) = ( 0 1 0 )</inlineequation>, and <inlineequation>(Z<subscript>A</subscript> Z<subscript>B</subscript> Z<subscript>C</subscript>) = ( 0 0 1 )</inlineequation>, and are placed in the <literal>&lt;direction&gt;</literal> elements in each <literal>&lt;dimension&gt;</literal> element.  The spacing values <inlineequation>(S<subscript>X</subscript> S<subscript>Y</subscript> S<subscript>Z</subscript>) = ( 3.75mm 3.75mm 4mm )</inlineequation> are put in the <literal>&lt;spacing&gt;</literal> element in each <literal>&lt;dimension&gt;</literal>.  The coordinates of the first voxel in the data are given by <inlineequation>(O<subscript>A</subscript> O<subscript>B</subscript> O<subscript>C</subscript>) = ( -120 -120 -52 )</inlineequation>.</para>

      <figure id="binary_data_resource.matrix">
        <title>Transformation matrix</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/binary_data_resource_tmatrix.png" format="png"/> </imageobject>
        </mediaobject>
      </figure>

      <figure id="binary_data_resource.map_example">
        <title><literal>mappedBinaryDataResource_t</literal> example</title>
        <programlisting><![CDATA[<dataResource xsi:type="mappedBinaryDataResource_t">
  <uri offset="0" size="442368">V0001.img</uri>
  <uri offset="0" size="442368">V0002.img</uri>
  <uri offset="0" size="442368">V0003.img</uri>
  <uri offset="0" size="442368">V0004.img</uri>
  <uri offset="0" size="442368">V0005.img</uri>
  <!-- ... 135 more <uri> elements omitted for space ... -->
  <elementType>int32</elementType>
  <byteOrder>msbfirst</byteOrder>
  <dimension label="x">
    <size>64</size>
    <spacing>3.75</spacing>
    <gap>0</gap>
    <direction>1 0 0</direction>
    <units>mm</units>
  </dimension>
  <dimension label="y">
    <size>64</size>
    <spacing>3.75</spacing>
    <gap>0</gap>
    <direction>0 1 0</direction>
    <units>mm</units>
  </dimension>
  <dimension label="z">
    <size>27</size>
    <spacing>4</spacing>
    <gap>1</gap>
    <direction>0 0 1</direction>
    <units>mm</units>
  </dimension>
  <dimension label="t">
    <size>140</size>
    <spacing>2</spacing>
    <gap>0</gap>
    <datapoints>0 2 4 6 8</datapoints>
    <units>sec</units>
  </dimension>
  <originCoords>-120 -120 -52</originCoords>
</dataResource>]]></programlisting>
      </figure>

    </section>

    <section>
      <title>Advanced topic: split dimensions and outputSelect</title>

      <para>A more complicated example is given by data generated by a Siemens MR scanner.  In this case, the data represents a three-dimensional 64x64x32 image, stored in DICOM format.  However, because the earlier versions of the DICOM format did not support three-dimensional data in one file, Siemens came upon the clever idea to <quote>tile</quote> the 32 two-dimensional slices across an NxN two-dimensional grid (<xref linkend='binary_data_resource.tile'/>).</para>

      <figure id="binary_data_resource.tile">
        <title>A <quote>tiled</quote>image</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/binary_data_resource_tile.png" format="png"/> </imageobject>
        </mediaobject>
      </figure>

      <para>Applications may naturally want to express this data as a three-dimensional block, with columns, rows, and slices.  In a conventionally-stored three-dimensional X&times;Y&times;Z image, the first X voxels compose the first row in the first slice, and then the next X voxels are the second row in the first slice; likewise the first <inlineequation>X*Y</inlineequation> voxels are the first slice, and the next <inlineequation>X*Y</inlineequation> voxels are the second slice, and so on.  However, in the <quote>tiled</quote> image, though the first X voxels are again the first row in the first slice, the next X voxels are the first row in the second slice!  At first it would seem that the dimension order has merely been switched, and specifying the labels of the dimensions as <inlineequation>x</inlineequation>, <inlineequation>z</inlineequation>, and <inlineequation>y</inlineequation> would fix things.  However, we only hit six slices' first rows before hitting going to the second row of the same six slices.  Only after going through all the rows in this fashion in the first six slices do we go on to the next six slices.</para>
      <para>The end result is that the dimension that we are calling the <inlineequation>z</inlineequation> dimension has been split in two.  The two components of the <inlineequation>z</inlineequation> dimension are interleaved with the <inlineequation>x</inlineequation> and <inlineequation>y</inlineequation> dimensions like so: <inlineequation>x, z<subscript>1</subscript>, y, z<subscript>2</subscript></inlineequation>.  The two components of the <inlineequation>z</inlineequation> dimension are distinguished with the <literal>splitRank</literal> attribute, as shown in <xref linkend='binary_data_resource.splitdim'/>.</para>

      <figure id="binary_data_resource.splitdim">
        <title>Split dimension example</title>
        <programlisting><![CDATA[<dataResource xsi:type="binaryDataResource_t">
  <uri offset="9240" size="589824">img0001.dcm</uri>
  <elementType>uint32</elementType>
  <byteOrder>lsbfirst</byteOrder>
  <dimension label="x">
    <size>64</size>
  </dimension>
  <dimension label="z" splitRank="1">
    <size>6</size>
  </dimension>
  <dimension label="y">
    <size>64</size>
  </dimension>
  <dimension label="z" splitRank="2">
    <size>6</size>
  </dimension>
</dataResource>]]></programlisting>
      </figure>

      <para>Applications should read this data as if it were four dimensions, and then permute the data to bring the two <inlineequation>z</inlineequation> dimensions together (in the order specified by splitRank) in the position of the highest-ranked split dimension, and the two dimensions can then be merged into one.  The size of the new <inlineequation>z</inlineequation> dimension is the product of the sizes of the component split dimensions, so <inlineequation>6 * 6 = 36</inlineequation>.</para>

      <para>You may recall that the original data was acquired as a 64x64x32 volume, but the NxN tiling representation requires that the number of tiles be the square of an integer N.  One more mechanism has been added to the <literal>&lt;dimension&gt;</literal> element to accomodate the presence of data that should be disregarded: the <literal>outputSelect</literal> attribute (see <xref linkend="binary_data_resource.outputSelect"/>).</para>

      <figure id="binary_data_resource.outputSelect">
        <title><literal>outputSelect</literal> example</title>
        <programlisting><![CDATA[<dataResource xsi:type="binaryDataResource_t">
  <uri offset="0" size="589824">img0001.dcm</uri>
  <elementType>uint32</elementType>
  <byteOrder>lsbfirst</byteOrder>
  <dimension label="x">
    <size>64</size>
  </dimension>
  <dimension label="z" splitRank="1">
    <size>6</size>
  </dimension>
  <dimension label="y">
    <size>64</size>
  </dimension>
  <dimension label="z" splitRank="2" outputSelect="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31">
    <size>6</size>
  </dimension>
</dataResource>]]></programlisting>
      </figure>

      <para>The <literal>outputSelect</literal> attribute specifies a list of indices along the given dimension (or combined dimension if it occurs on the highest-ranked component of a split dimension) that should be regarded as valid data.  Data in the other indices should be ignored.</para>

    </section>

  </section>

</chapter>
