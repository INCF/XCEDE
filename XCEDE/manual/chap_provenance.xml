<?xml version="1.0" encoding="UTF-8"?>
<chapter id="chapter.provenance">
  <title>Provenance</title>

  <section>
    <title>Overview</title>
  <para>Provenance is used to record in detail the sequence of processing and analysis 
steps that have been executed to create a derived image and/or measures. 
These details include the name and type of machine on which the executable was run, 
the name of the executable, and input parameters to the exectuable.</para>

  <para>MR studies represented in XCEDE 2 will be populated with large numbers of medical image volumes which 
researchers will wish to access and run through various processing tools in order to obtain 
derived data. This derived data, such as volumes of various brain structures, cortical thickness etc., 
will then be placed back into the database, linked to the original volume from which it was produced.
 If a researcher would like to recreate the processing steps, in order to apply it to a new data set,
 they will be able to obtain the information needed to download or reconstruct the tools that were 
used on the original data set.  In typical usage, information about the processing tools will be made available by 
the authors of the tools, collected at run time by processing scripts, and written into XCEDE documents.
</para>

    <formalpara>
      <title><type>provenance_t</type></title>
      <para>Data represented by an instance of <type>dataResource_t</type> or <literal>analysis_t</literal> may contain a <literal>&lt;provenance&gt;</literal> element of this type, which represents an ordered sequence of processing steps (<type>processStep_t</type>) that were executed to create the data.</para>
    </formalpara>

    <formalpara>
      <title><type>processStep_t</type></title>
      <para>This type contains two attributes, ID and parent, indicating a unique ID for the step and its 
parent step, respectively. It includes a number of child elements that describe the conditions
under which an executable was run. All of the child elements are formally optional. The following are strongly
recommended:</para>
    </formalpara>

	<variablelist>
	<varlistentry>
  	<term>program</term> 
	<listitem>
		<para>The name of the executable.  Version and build numbers may be specified using the attributes <literal>version</literal> and <literal>build</literal>. 
See instructions below for inserting version control content. Alternately, you can define it as a user string. </para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>programArguments</term>
	<listitem>
		<para> The arguments passed into the executable.  Optional attributes <literal>inputs</literal> and <literal>outputs</literal> are used to break 
down the full list of arguments into input and output arguments.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>timeStamp</term>
	<listitem>
		<para> The time at which the program started to run.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>user</term>
	<listitem>
		<para> Who was logged in and running this executable?</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>hostName</term>
	<listitem>
		<para> The unique id of the computer running this executable. Replaces Machine from old schema.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>architecture</term>
	<listitem>
		<para> The type of hardware that the processing step is run on, <literal>sun</literal>, <literal>x86</literal>, etc.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>platform</term>
	<listitem>
		<para> The operating system under which the processing step is being run.</para>
	</listitem>
	</varlistentry>

	</variablelist>

	<para>These are optional:</para>
	<variablelist>
	<varlistentry>
	<term>cvs</term>
	<listitem>
		<para>Revision control repository information.  Use the CVS keyword Id, inserted into your source code
 file as <literal>$Id: chap_provenance.xml,v 1.11 2007-08-17 22:00:26 dmarcus Exp $</literal> and it will be replaced with the file name, version, date of change and who changed it. 
Also works with SVN, but see SVN notes for enabling it.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>compiler</term>
	<listitem>
		<para>What was used to compile this executable? Name and version.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>library</term>
	<listitem>
		<para>The name and version of a linked library. Can be repeated as many times as necessary. 
This is dependent on the library in question, examples are given for VTK and Tcl and Tk.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>buildTimeStamp</term>
	<listitem>
		<para>The time stamp indicating when the executable was built.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>package</term>
	<listitem>
		<para>This tag gives the overall package version, if the executable is part of a larger unit.  For example, 
mri_convert is part of FreeSurfer, and the whole FreeSurfer package may have a different version number than the
 mri_convert executable.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term>repository</term>
	<listitem>
		<para>Where can the software be found? Link to a code repository or a web page. Can be extracted automatically 
if using SVN, via the HeadURL keyword.</para>
	</listitem>
	</varlistentry>

	</variablelist>
  </section>

  <section>
    <title>Examples</title>
  </section>

     <para>Provenance elements are children of dataReource and analysis types and describe the sequence of processing steps that were executed to generate the data represented by the parent element.
In the example below, the provenance of the nifti data file (represented as a binaryDataResource) indicates that it 
was generated in two processing steps (filter1 and filter2) on the same machine (lablin1) about 30 mintues apart.</para>

      <figure id="provenance.simple_example">
        <title>Simple provenance example</title>
        <programlisting><![CDATA[
		<dataResource xsi:type="binaryDataResource_t">
  		<uri offset="354" size="8192">random_generated_data_file.nii</uri>
  		<provenance ID="1">
			<processStep parent="1" ID="1">
				<program build="1.0" version="1.0">filter1</program>
				<programArguments inputs="-in analyze" outputs="-out minc">-size 10 -reps 100 -v -in minc -out nifti</programArguments>
				<timeStamp>11:20:37</timestamp>
				<user>xnatmaster</xnat>
				<hostName>lablin1</hostname>
				<architecture>x86</architecture>
				<platform version="6">fedora</platform>
			</processStep>
			<processStep parent="1" ID="2">
				<program build="String" version="1.2">filter2</program>
				<programArguments inputs="-in minc" outputs="-out nifti">-size 20 -reps 200 -v -in minc -out nifti</programArguments>
				<timeStamp>11:50:21</timestamp>
				<user>xnatmaster</user>
				<hostName>lablin1</hostname>
				<architecture>x86</architecture>
				<platform version="6">fedora</platform>
			</processStep>
  		</provenance>
  		<elementType>float32</elementType>
  		<byteOrder>lsbfirst</byteOrder>
		</dataResource>]]></programlisting>
      </figure>



  <section>
	<title>Generating provenance XML from applications</title>
<para>The figure below illustrates a C code snippet (written by Nicole Aucoin and implemented in 3DSlicer) that generates
provenance XML from an application. [Note: This may not be completely compliant with XCEDE2.]</para>

<informalexample id="provenance_generation.example">
<programlisting><![CDATA[
void printAllInfo(int argc, char **argv)
{
  int i;
  struct tm * timeInfo;
  time_t rawtime;
  // yyyy/mm/dd-hh-mm-ss-ms-TZ
  // plus one for 3 char time zone
  char timeStr[27];

  fprintf(stdout, "<ProcessStep>\n");
  fprintf(stdout, "<Program version=\"$Revision: 1.11 $\">%s</ProgramName>\n", argv[0]);
  fprintf(stdout, "<ProgramArguments>");
  for (i = 1; i < argc; i++)
    {
    fprintf(stdout, " %s", argv[i]);
    }
  fprintf(stdout, "</ProgramArguments>\n");
  fprintf(stdout, "<CVS>$Id: chap_provenance.xml,v 1.11 2007-08-17 22:00:26 dmarcus Exp $</CVS> <TimeStamp>");
  time ( &rawtime );
  timeInfo = localtime (&rawtime);
  strftime (timeStr, 27, "%Y/%m/%d-%H-%M-%S-00-%Z", timeInfo);
  fprintf(stdout, "%s</TimeStamp>\n", timeStr);
  fprintf(stdout, "<User>%s</User>\n", getenv("USER"));

  fprintf(stdout, "<HostName>");
  if (getenv("HOSTNAME") == NULL)
    {
    if (getenv("HOST") == NULL)
      {
      fprintf(stdout, "(unknown)");
      }
    else
      {
      fprintf(stdout, "%s", getenv("HOST"));
      }
    }
  else
    {
    fprintf(stdout, "%s", getenv("HOSTNAME"));
    }
  fprintf(stdout, "</HostName><Platform version=\"");
#if defined(sun) || defined(__sun)
#if defined(__SunOS_5_7)
  fprintf(stdout, "2.7");
#endif
#if defined(__SunOS_5_8)
  fprintf(stdout, "8");
#endif
#endif
#if defined(linux) || defined(__linux)
  fprintf(stdout, "unknown");
#endif

  fprintf(stdout, "\">");
  // now the platform name
#if defined(linux) || defined(__linux)
  fprintf(stdout, "Linux");
#endif
#if defined(macintosh) || defined(Macintosh)
  fprintf(stdout, "MAC OS 9");
#endif
#ifdef __MACOSX__
  fprintf(stdout, "MAC OS X");
#endif
#if defined(sun) || defined(__sun)
# if defined(__SVR4) || defined(__svr4__)
  fprintf(stdout, "Solaris");
# else
  fprintf(stdout, "SunOS");
# endif
#endif
#if defined(_WIN32) || defined(__WIN32__)
  fprintf(stdout, "Windows");
#endif
  fprintf(stdout, "</Platform>\n");

  if (getenv("MACHTYPE") != NULL)
    {
    fprintf(stdout, "<Architecture>%s</Architecture>\n", getenv("MACHTYPE"));
    }

  fprintf(stdout, "<Compiler version=\"");
  #if defined(__GNUC__)
#if defined(__GNU_PATCHLEVEL__)
  fprintf(stdout, "%d", (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__));
#else
  fprintf(stdout, "%d", (__GNUC__ * 10000 + __GNUC_MINOR__ * 100));
#endif
#endif
#if defined(_MSC_VER)
  fprintf(stdout, "%d", (_MSC_VER));
#endif
  // now the compiler name
  fprintf(stdout, ">");
#if defined(__GNUC__)
  fprintf(stdout, "GCC");
#else
#if defined(_MSC_VER)
  fprintf(stdout, "MSC");
#else
  fprintf(stdout, "UKNOWN");
#endif
#endif
  fprintf(stdout, "</Compiler>\n");


  fprintf(stdout, "<Library version=\"%s\">VTK</Librarary><Library version=\"unknown\">ITK</Library><Library version=\"%s\">KWWidgets</Library>\n", VTK_VERSION, KWWidgets_VERSION);
  int major, minor, patchLevel;
  Tcl_GetVersion(&major, &minor, &patchLevel, NULL);
  fprintf(stdout, "<Library version=\"%d.%d.%d\">TCL</Library>\n", major, minor, patchLevel);
  //fprintf(stdout, "<Library version=\"%d.%d.%d\">TK</Library>\n", major,
  //minor, patchLevel);
#ifdef USE_PYTHON
  fprintf(stdout, "<Library version=\"%s\">Python</Library>\n", PY_VERSION);
#endif
  fprintf(stdout, "<Repository>$HeadURL: http://www.na-mic.org/svn/Slicer3/trunk/Applications/GUI/Slicer3.cxx $</Repository>\n");
  fprintf(stdout, "<ProcessStep>\n");
  fprintf(stdout, "\n");
}
]]></programlisting>
</informalexample>

<para>For the version, you can use the CVS keyword Name, inserted into your source code file as $Name: not supported by cvs2svn $
 and it will be replaced with a the version tag when you check out the code with a tag:</para>

<programlisting><![CDATA[cvs -r tag co [modulename]</programlisting>]]></programlisting>

<para>If you are using SVN, in order to use CVS style keywords and have them be replaced with 
the appropriate values, you must enable the SVN repository's properties on a file by file (and keyword by keyword) 
basis by issuing the following command:</para>

<programlisting><![CDATA[svn propset svn:keywords "Revision Id Date HeadURL" [filename.ext]]]></programlisting>
</section>

  <section>
    <title>Reference</title>

    <figure id="provenance.ref_diagram ">
      <title>provenance_t</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/provenance_t.png" format="asvg" width="6in"/> </imageobject>
      </mediaobject>
    </figure>

  </section>

</chapter>
